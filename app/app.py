import streamlit as st
import pandas as pd
import plotly.express as px
from geojson import Feature, FeatureCollection
from shapely import wkt
import json

st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π –∏ —Ä–∏—Å–∫–æ–≤ –ü–µ—Ä–º—Å–∫–æ–≥–æ –∫—Ä–∞—è",
    page_icon="üöí", layout="wide",
    initial_sidebar_state="expanded",
    menu_items={'Get Help': None,'Report a bug': None,'About': None})

hide_streamlit_style = """<style>#MainMenu {visibility: hidden;}footer {visibility: hidden;}</style>"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

def hexagons_dataframe_to_geojson(df_hex, hex_id_field, geometry_field, value_field, file_output=None):

    list_features = []
    for i, row in df_hex.iterrows():
        feature = Feature(geometry=row[geometry_field],
                          id=row[hex_id_field],
                          properties={"value": row[value_field]})
        list_features.append(feature)

    feat_collection = FeatureCollection(list_features)

    if file_output is not None:
        with open(file_output, "w") as f:
            json.dump(feat_collection, f)
    else :
        return feat_collection

@st.cache_data
def load_data():
    '''–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞'''
    region = pd.read_csv('app/data/df_region.csv')
    region['geometry'] = region['geometry'].apply(wkt.loads)
    predict = pd.read_csv('app/data/predict.csv')
    data = predict.merge(region)
    return data

danger = {'–ê–≤–∞—Ä–∏–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ': 'is_dtp', '–ê–≤–∞—Ä–∏–∏ –Ω–∞ –ø—Ä–æ—á–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ': 'is_transport',
          '–í–∑—Ä—ã–≤—ã/–ø–æ–∂–∞—Ä—ã': 'is_fire', '–ê–≤–∞—Ä–∏–∏ —Å –≤—ã–±—Ä–æ—Å–æ–º –æ–ø–∞—Å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤': 'is_toxic',
          '–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å': 'is_bio', '–û–ø–∞—Å–Ω—ã–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è': 'is_nature',
          '–ê–≤–∞—Ä–∏–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ö –∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è': 'is_zkh', '–ü—Ä–æ—á–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏': 'is_etc'}

#===================================================================================
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ csv —Ñ–∞–π–ª–∞
data=load_data()
dates=data.date.unique().tolist()

choice=st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–∞—Å–Ω–æ—Å—Ç–∏', list(danger.keys()))
choice_value=danger[choice]
choice_date=st.select_slider('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å', options=dates)

df=data[data.date==choice_date]

geojson_obj=(hexagons_dataframe_to_geojson(df, hex_id_field='district', value_field=choice_value,
                                           geometry_field='geometry'))

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ, –∂–µ–ª—Ç–æ–≥–æ –∏ –∫—Ä–∞—Å–Ω–æ–≥–æ
color_scale = [[0, 'green'], [0.33, 'green'],
               [0.34, 'yellow'], [0.67, 'yellow'],
                [0.68, 'red'], [1, 'red']]

fig = (px.choropleth_mapbox(
                    df,
                    geojson=geojson_obj,
                    locations='district',
                    color=choice_value,
                    color_continuous_scale=color_scale,
                    mapbox_style='carto-positron',
                    zoom=5,
                    center={"lat": 59.02968, "lon": 56.26679},
                    opacity=0.7,
                    labels={'count'}))

fig.update_layout(margin={"r": 0, "t": 0, "l": 0, "b": 0})
fig.update_layout(height=800)
st.title('–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞')
st.plotly_chart(fig, use_container_width=True, width=800, height=800)
